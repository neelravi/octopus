dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.F90)

PACKAGE="octopus"
VERSION="1.0"
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_ARG_PROGRAM
AC_PROG_MAKE_SET

AM_SANITY_CHECK
AC_PROG_INSTALL

AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
##AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
AUTOMAKE="'./automake'" dnl has to be harwired
AC_SUBST(AUTOMAKE)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)
AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)

AM_CONFIG_HEADER(liboct/config.h src/config.h)

dnl Installation prefix by default
AC_PREFIX_DEFAULT(`(pwd)`)

dnl basic programs needed
AC_PROG_CC
ACX_POINTER_SIZE

dnl FORTRAN 90 checks
ACX_PROG_F90

dnl libtool files
AC_PROG_LIBTOOL

dnl who am i
AC_CANONICAL_HOST

dnl let us see if we know the fortran compiler
if test -z "${F90FLAGS}"; then
	case "${host_os}" in
	*linux*)
		echo "***********************************************************"  
		echo "*         Congratulations! You are running linux.         *"
		echo "***********************************************************"  
		case "${F90}" in
		pgf90*)
  		F90FLAGS="-O2 -fast -Munroll -Mnoframe -Mdalign"
		;;
		abf90*)
			F90FLAGS="-O -YEXT_NAMES=LCS -YEXT_SFX=_"
		;;
		*)
			F90FLAGS="-O"
		esac
	;;
	osf*)
		F90FLAGS="-O5 -align dcommons -tune host -arch host"
		;;
	*)
		F90FLAGS="-O"
	esac
fi
AC_SUBST(F90FLAGS)

dnl how does fortran creates symbols in .o files
ACX_F90_FUNC_MANGLE

dnl have to hard wire this, because cc -E does not work on FORTRAN files
dnl this should be changed...
if test -z "$F90CPP"; then
	F90CPP="/lib/cpp"
	F90CPPFLAGS="-C"
	AC_SUBST(F90CPP)
	AC_SUBST(F90CPPFLAGS)
fi

#libtool stuff
AM_PROG_LIBTOOL

AC_PROG_INSTALL
AC_PROG_YACC

dnl define basic language
AC_LANG_FORTRAN90

if test -z "${LIB_FFTW}"; then
	AC_ARG_WITH(fftw, [  --with-fftw=DIR         get it! (www.fftw.org)], FFTWDIR=$withval, FFTWDIR="")
	if test "$FFTWDIR" != "no"; then
  	AC_DEFINE(HAVE_FFTW)
	  save_ldflags="$LDFLAGS"
  	if test "$FFTWDIR"; then
    	LDFLAGS="${LDFLAGS} -L${FFTWDIR} -L${FFTWDIR}/lib"
	  fi
  	if test -z "${LIB_FFTW}"; then
  		ACX_CHECK_FUNC_F90(fftw3d_f77_create_plan, [LIB_FFTW=" "])
	  fi
  	if test -z "${LIB_FFTW}"; then
    	ACX_CHECK_LIB_F90(fftw, fftw3d_f77_create_plan, [LIB_FFTW="-lfftw"])
	  fi
  	if test -z "${LIB_FFTW}"; then
    	ACX_CHECK_LIB_F90(dfftw, fftw3d_f77_create_plan, [LIB_FFTW="-ldfftw"])
	  fi
  	if test -z "${LIB_FFTW}"; then
    	AC_MSG_ERROR(couldn't find fftw library for --with-fftw)
		fi
	
		dnl and now we check for rfftw
	  if test -z "${LIB_RFFTW}"; then
  		ACX_CHECK_FUNC_F90(rfftw3d_f77_create_plan, [LIB_RFFTW=" "], [], "${LIB_FFTW}")
	  fi
  	if test -z "${LIB_RFFTW}"; then
    	ACX_CHECK_LIB_F90(rfftw, rfftw3d_f77_create_plan, [LIB_RFFTW="-lrfftw"], [], "${LIB_FFTW}")
	  fi
  	if test -z "${LIB_RFFTW}"; then
    	ACX_CHECK_LIB_F90(drfftw, rfftw3d_f77_create_plan, [LIB_RFFTW="-ldrfftw"], [], "${LIB_FFTW}")
	  fi
  	if test -z "${LIB_RFFTW}"; then
    	AC_MSG_ERROR(couldn't find rfftw library for --with-fftw)
		fi
	
  	LDFLAGS="$save_ldflags"

	  if test "$FFTWDIR"; then
			LIB_FFTW="-L${FFTWDIR} -L${FFTWDIR}/lib ${LIB_FFTW} ${LIB_RFFTW}"
		fi
	fi
fi
AC_SUBST(LIB_FFTW)

if test -z "${LIB_LAPACK}"; then
	AC_ARG_WITH(lapack, dnl
		[  --with-lapack=DIR       get it! (http://www.netlib.org/lapack/)], dnl
		LAPACKDIR=$withval, LAPACKDIR="")
	if test "$LAPACKDIR" != "no"; then
  	AC_DEFINE(HAVE_LAPACK)
	  AC_DEFINE(HAVE_BLAS) dnl assume blas is also around

  	save_ldflags="$LDFLAGS"
	  if test "$LAPACKDIR"; then
  	  LDFLAGS="$LDFLAGS -L$LAPACKDIR -L$LAPACKDIR/lib"
	  fi

  	if test -z "${LIB_LAPACK}"; then
	  	ACX_CHECK_FUNC_F90(dsygv, [LIB_LAPACK=" "])
  	fi
	  if test -z "${LIB_LAPACK}"; then
  	  ACX_CHECK_LIB_F90(lapack, dsygv, [LIB_LAPACK="-llapack -lblas"], [], "-lblas")
	  fi
  	if test -z "${LIB_LAPACK}"; then
    	AC_MSG_ERROR(couldn't find lapack/blas library for --with-lapack)
		fi

  	LDFLAGS="$save_ldflags"

	  if test "$LAPACKDIR"; then
			LIB_LAPACK="-L${LAPACKDIR} -L${LAPACKDIR}/lib ${LIB_LAPACK}"
		fi
	fi
fi
AC_SUBST(LIB_LAPACK)

if test -z "${LIB_GSL}"; then
	dnl gsl is to be used from C
	AC_LANG_SAVE
	AC_LANG_C

	# now we check for gsl
	AC_ARG_WITH(gsl, dnl
		[  --with-gsl=DIR          get it! (http://sources.redhat.com/gsl/)], dnl
		GSLDIR=$withval, GSLDIR="")
	if test "$GSLDIR" != "no"; then
  	AC_DEFINE(HAVE_GSL)
	  save_ldflags="$LDFLAGS"
  	if test "$GSLDIR"; then
    	LDFLAGS="${LDFLAGS} -L${GSLDIR}/lib"
			CPPFLAGS="${CPPFLAGS} -I${GSLDIR}/include"
  	fi

	  if test -z "${LIB_GSL}"; then
  		AC_CHECK_FUNC(gsl_complex_sqrt, [LIB_GSL=" "])
	  fi
  	if test -z "${LIB_GSL}"; then
    	AC_CHECK_LIB(gsl, gsl_complex_sqrt, [LIB_GSL="-lgsl -lgslcblas"], [], "-lgslcblas")
	  fi
  	if test -z "{$LIB_GSL}"; then
    	AC_MSG_ERROR(couldn't find gsl library for --with-gsl)
		fi

  	LDFLAGS="$save_ldflags"

	  if test "$GSLDIR"; then
  		LIB_GSL="-L${GSLDIR}/lib ${LIB_GSL}"
		fi
	fi

	dnl reset the language
	AC_LANG_RESTORE
fi
AC_SUBST(LIB_GSL)


dnl we can work in 1 and 3 dimensions
AC_ARG_ENABLE(1d, [  --enable-1d             Let us work in 1D], ONE_D=1)
AC_ARG_ENABLE(3d, [  --enable-3d             or, if you prefer, in 3D], THREE_D=1)
if test "${ONE_D}"; then
	AC_DEFINE(ONE_D)
else
	AC_DEFINE(THREE_D)
fi

AC_OUTPUT(Makefile src/Makefile liboct/Makefile doc/Makefile)

dnl have to change the comments in src/config.h
dnl or fortran will not compile it...
sed 's%/\*%!%g; s%\*/%%g' src/config.h >src/tmp
mv -f src/tmp src/config.h
