This is octopus.info, produced by makeinfo version 4.3 from
octopus.texi.

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* octopus: (octopus).           The octopus program.
END-INFO-DIR-ENTRY


File: octopus.info,  Node: POLStaticField,  Next: Displacement,  Prev: PoissonSolver,  Up: Varia

`POLStaticField' (double, 0.001 a.u.)
-------------------------------------

   Magnitude of the static field used to calculate the static
polarizability in `CalculationMode = 7, 8'.


File: octopus.info,  Node: Displacement,  Prev: POLStaticField,  Up: Varia

`Displacement' (double, 0.01 a.u.)
----------------------------------

   When calculating phonon properties (`CalculationMode = 11')
`Displacement' controls how much the atoms are to be moved in order to
calculate the dynamical matrix.


File: octopus.info,  Node: External utilities,  Next: Examples,  Prev: Input file options,  Up: Top

External utilities
******************

   A few small programs are generated along with `octopus', for the
purpose of post-processing the generated information. These utilities
should all be run from the directory where `octopus' was run, so that
it may see the `inp' file, and the directories created by it.

* Menu:

* oct-sf::
* oct-rsf::
* oct-hs-mult::
* oct-hs-acc::
* oct-xyz-anim::
* oct-excite::
* oct-broad::
* oct-make-st::
* oct-choose-st::
* oct-center-geom::
* wf.net::


File: octopus.info,  Node: oct-sf,  Next: oct-rsf,  Prev: External utilities,  Up: External utilities

`oct-sf'
========

   This utility generates the dipole strength function of the given
system.  Its main input is the `td.general/multipoles' file. Output is
written to a file called `spectrum'. This file is made of two columns:
energy (in eV or a.u., depending on the units specified in `inp'), and
dipole strength function (in 1/eV, or 1/a.u., idem).

   In the `inp' file, the user may set the `SpecTransformMode' - this
should be set to "sin" for proper use -, the `SpecDampMode' -
recommended value is "pol", which ensures fulfilling of the N-sum rule,
the `SpecStartTime', the `SpecEndTime', the `SpecEnergyStep', the
`SpecMinEnergy' and the `SpecMaxEnergy'.


File: octopus.info,  Node: oct-rsf,  Next: oct-hs-mult,  Prev: oct-sf,  Up: External utilities

`oct-rsf'
=========


File: octopus.info,  Node: oct-hs-mult,  Next: oct-hs-acc,  Prev: oct-rsf,  Up: External utilities

`oct-hs-mult'
=============

   Calculates the harmonic spectrum, out of the multipoles file. To do.


File: octopus.info,  Node: oct-hs-acc,  Next: oct-xyz-anim,  Prev: oct-hs-mult,  Up: External utilities

`oct-hs-acc'
============

   Calculates the harmonic spectrum, out of the acceleration file. To
do.


File: octopus.info,  Node: oct-xyz-anim,  Next: oct-excite,  Prev: oct-hs-acc,  Up: External utilities

`oct-xyz-anim'
==============

   Reads out the `td.general/coordinates' file, and makes a movie in
XYZ format. To do.


File: octopus.info,  Node: oct-excite,  Next: oct-broad,  Prev: oct-xyz-anim,  Up: External utilities

`oct-excite'
============

   Calculates the excitation spectrum within linear response. This
utility can output just the difference of eigenvalues by setting
`LinEigenvalues', the excitations using M. Petersilka formula
(`LinPetersilka'), or M. Casida (`LinCasida'). This utility requires
that a calculation of unoccupied states (`CalculationMode' = 3, 4) has
been done before, and it outputs the results to the sub-directory
"linear".


File: octopus.info,  Node: oct-broad,  Next: oct-make-st,  Prev: oct-excite,  Up: External utilities

`oct-broad'
===========

   Generates a spectrum by broadening the excitations obtained by the
`excitations' utility. The parameters of the spectrum can be set using
the variables `LinBroadening', `MinEnergy', `MaxEnergy', and
`EnergyStep'.


File: octopus.info,  Node: oct-make-st,  Next: oct-choose-st,  Prev: oct-broad,  Up: External utilities

`oct-make-st'
=============

   `make_st' reads `tmp/restart.static' and replaces some of the
Kohn-Sham states by Gaussians wave packets. The states which should be
replaced are given in the `%MakeStates' section in the `inp' file and
written to `tmp/restart.static.new'. (You probably want to copy that
file to `tmp/restart.static' and use then `CalculationMode=5' or `6'.)

     %MakeStates
       ik | ist | idim | type | sigma | x0 | k
     %

   The first values stand for

   * ik: The k point (or the spin, if `spin-components=2') of the state

   * ist: The state to be replaced

   * idim: The component of the state (if the wave functions have more
     than one component, i.e. when `spin-components=3' is used).

   * The type of the wave packet; currently only `1' (Gaussian) is
     available

   The next items depend on the type chosen.  For a Gaussian wave
packet, defined as

   psi(x) = 1/sigma sqrt(1/2pi) exp(ik(x-x0)) exp(-(x-x0)^2/(2
sigma^2)),

   they are:

   * \sigma the width of the Gaussian

   * k: the *k* vector. In 3D use `k1|k2|k3'.

   * x_0: the coordinate where the Gaussian is initially centred. In 3D
     use `x01|x02|x03'.


File: octopus.info,  Node: oct-choose-st,  Next: oct-center-geom,  Prev: oct-make-st,  Up: External utilities

`oct-choose-st'
===============

   `choose_st' is used to choose the states used for optimum control
(`CalculationMode=12'). You probably want to calculate unoccuppied
states (`CalculationMode=12') first since `choose_st' reads
`tmp/restart.static' and writes the choosen states to the `opt-control'
sub-directory. The following parameters are read from the `inp'ut file:

   * `ChooseStates' (integer, 1-4024):   The states which should be
     written.

   * `ChooseStatesFilename' (string, 'wf.initial'):   The file name to
     which the state(s) should be written.    For optimum control you
     only need 'wf.initial' and 'wf.final'.


File: octopus.info,  Node: oct-center-geom,  Next: wf.net,  Prev: oct-choose-st,  Up: External utilities

`oct-center-geom'
=================

   It centers the molecular geometry.


File: octopus.info,  Node: wf.net,  Prev: oct-center-geom,  Up: External utilities

`wf.net'
========

   This is an OpenDX network, aimed at the visualization of
wave-functions.  To be able to use it, you need to have properly
installed the OpenDX program (get it at opendx.org), as well as the
Chemistry extensions obtainable at the Cornell Theory Center
(http://www.tc.cornell.edu/Services/Vis/dx/index.asp).  Once these are
working, you may follow a small tutorial on `wf.net' by following next
steps:

   o Place in a directory the program wf.net, the (needed) auxiliary
     file wf.cfg, and the sample inp file that can all be found in
     `OCTOPUS-HOME'/util.

   o Run `octopus'. The inp file used prescribes the calculation of the
     C atom in its ground state, in spin-polarized mode. It also
     prescribes that the wave-functions should be written in "dx"
     format. At the end, these should be written in subdirectory
     "static": wf-00x-00y-1.dx, where x runs from 1 to 2 (spin quantum
     number) and y runs from 1 to 4 (wave-function index).

   o Run the OpenDX program. Click on "Run Visual Programs" on the DX
     main menu, and select the program `wf.net'. The program will be
     executed, and several windows should open. One of them should be
     called "Application Comment". It contains a small tutorial. Follow
     it from now on.



File: octopus.info,  Node: Examples,  Next: Options Index,  Prev: External utilities,  Up: Top

Examples
********

* Menu:

* Hello world::
* Benzene::


File: octopus.info,  Node: Hello world,  Next: Benzene,  Prev: Examples,  Up: Examples

Hello world
-----------

   As a first example, we will take a sodium atom.  With your favourite
text editor, create the following input "inp".
       SystemName = 'Na'
       CalculationMode = 1
       %Species
         'Na' | 22.989768 | 11 | "tm2" | 0 | 0
       %
       %Coordinates
         'Na' | 0.0 | 0.0 | 0.0 | no
       %
       Radius = 12.0
       Spacing = .6
       TypeOfMixing = 2

   This input file should be essentially self-explanatory.  Note that a
Troullier-Martins pseudopotential file ("Na.vps", or "Na.ascii") should
be accesible to the program. A sample "Na.ascii" may be found in
`OCTOPUS-HOME/share/PP/TM2'. If `octopus' was installed (`make install'
was issued after `make'), there should be no need to do anything - the
program should find it. Otherwise, you may as well place it in the
working directory.  Then run `octopus' - for example, do `octopus > out
', so that the output is stored in "out" file. If everything goes OK,
"out" should look like (1):
                         Running octopus, version 1.1
                  (build time - Fri Mar 14 14:23:49 CET 2003)
     
     Info: Calculation started on 2003/03/17 at 03:49:56
     Info: Reading pseudopotential from file:
           '/home/marques/share/octopus/PP/TM2/Na.ascii'
           Calculating atomic pseudo-eigenfunctions for specie Na....
           Done.
     Info: l =  0 component used as local potential
       Type = sphere           Radius [b] =  12.000
       Spacing [b] = ( 0.600, 0.600, 0.600)    volume/point [b^3] =  0.21600
       # inner mesh =  33401   # outer mesh =  18896
     Info: Derivatives calculated in real-space
     Info: Local Potential in Reciprocal Space.
     Info: FFTs used in a double box (for poisson | local potential)
           box size = (  81,  81,  81)
           alpha =      2.00000
     Info: Using FFTs to solve poisson equation with spherical cutoff.
     Info: Exchange and correlation
           Exchange    family    : LDA
                       functional: non-relativistic
           Correlation family    : LDA
                       functional: Perdew-Zunger
     Info: Allocating rpsi.
     Info: Random generating starting wavefunctions.
     Info: Unnormalized total charge =      0.998807
     Info: Renormalized total charge =      1.000000
     Info: Setting up Hamiltonian.
     Info: Performing LCAO calculation.
     Info: LCAO basis dimension:      1
           (not considering spin or k-points)
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102098       1.000000
     Info: SCF using real wavefunctions.
     Info: Broyden mixing used. It can (i) boost your convergence,
           (ii) do nothing special, or (iii) totally screw up the run.
           Good luck!
     Info: Converged =     0
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102975       1.000000      (2.8E-02)
     Info: iter =    1 abs_dens = 0.53E-03 abs_ener = 0.60E+00
     
     Info: Converged =     0
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102477       1.000000      (1.4E-03)
     Info: iter =    2 abs_dens = 0.43E-03 abs_ener = 0.65E-05
     
     Info: Converged =     1
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102419       1.000000      (5.1E-04)
     Info: iter =    3 abs_dens = 0.39E-04 abs_ener = 0.20E-06
     
     Info: Converged =     1
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102436       1.000000      (8.5E-05)
     Info: iter =    4 abs_dens = 0.24E-04 abs_ener = 0.52E-08
     
     Info: Converged =     1
     Eigenvalues [H]
        #   Eigenvalue    Occupation      Error (1)
        1    -0.102437       1.000000      (1.5E-06)
     Info: iter =    5 abs_dens = 0.14E-05 abs_ener = 0.36E-10
     
     Info: SCF converged in    5 iterations
     Info: Deallocating rpsi.
     Info: Calculation ended on 2003/03/17 at 03:50:04
   Take now a look at the working directory. It should include the
following files:
     -rw-rw-r--    1 user  group       177 Jul 10 12:29 inp
     -rw-rw-r--    1 user  group      4186 Jul 10 12:35 out
     -rw-rw-r--    1 user  group      1626 Jul 10 12:35 out.oct
     drwxrwxr-x    2 user  group      4096 Jul 10 12:35 static
     drwxrwxr-x    2 user  group      4096 Jul 10 12:35 tmp

   Besides the initial file (`inp') and the `out' file, two new
directories appear. In `static', you will find the file `info', with
information about the static calculation (it should be hopefully
self-explanatory, otherwise please complain to the authors).  In `tmp',
you will find the `restart.static', a binary file containg restart
information about the ground-state, which is used if, for example, you
want to start a time-dependent calculation afterwards.  Finally, you
can safely ignore `out.oct': it is an output from the liboct library,
irrelevant for what concerns physics ;).

   *Exercises*:
   * Study how the total energy and eigenvalue of the sodium atom
     improve   with the mesh spacing.

   * Calculate the static polarizability of the sodium atom
     (`CalculationMode = 7').    Two new files will be generated:
     `restart.pol' that can be used to resume   the polarizability
     calculation, and `Na.pol' that contains the static polarizability
     tensor. Note that this calculation overwrites
     `tmp/restart.static', so that   what now is there is the ground
     state for the system _with_ an external static   electrical field
     applied. Delete it since it is useless.

   * Calculate a few unoccupied states (`CalculationMode = 3'). The
     eigenspectrum   will be in the file `eigenvalues'. Why don't we
     find a Rydberg series in the   eigenspectrum?

   * Repeat the previous calculation with PBE, LB94, and exact exchange.
      Don't forget to *move* the file `tmp/restart.static' when
     switching   between exchange-correlation functionals.

   * Perform a time-dependent evolution (`CalculationMode = 5'), to
     calculate   the optical spectrum of the Na atom. Use a
     `TDDeltaStrength = 0.05', polarised   in the `x' direction. The
     multipole moments of the density are output to   the file
     `td.general/multipoles'. You can process this file with the utility
      `strength-function' to obtain the optical spectrum.    If you
     have computer time to waste, re-run the time-dependent
     simulation for some other xc choices.


   ---------- Footnotes ----------

   (1) Before this output, a beautiful octopus ascii-art picture may be
printed...


File: octopus.info,  Node: Benzene,  Prev: Hello world,  Up: Examples

Benzene
-------

   Well, the sodium atom is a bit too trivial. Let's try something
harder: benzene.  you will just need the geometry for benzene to be
able to play. Here it is (in AA):
      C  0.000  1.396  0.000
      C  1.209  0.698  0.000
      C  1.209 -0.698  0.000
      C  0.000 -1.396  0.000
      C -1.209 -0.698  0.000
      C -1.209  0.698  0.000
      H  0.000  2.479  0.000
      H  2.147  1.240  0.000
      H  2.147 -1.240  0.000
      H  0.000 -2.479  0.000
      H -2.147 -1.240  0.000
      H -2.147  1.240  0.000

   Follow now the steps of the previous example. Carbon and Hydrogen
have a much harder pseudo-potential than Sodium, so you will probably
have to use a tighter mesh. It also takes much more time...


File: octopus.info,  Node: Options Index,  Prev: Examples,  Up: Top

Options Index
*************

* Menu:

* ABHeight:                              ABHeight.
* AbsorbingBoundaries:                   AbsorbingBoundaries.
* ABWidth:                               ABWidth.
* BoxShape:                              BoxShape.
* CalculationMode:                       CalculationMode.
* CFunctional:                           CFunctional.
* ChooseStates:                          oct-choose-st.
* ChooseStatesFilename:                  oct-choose-st.
* ClassicPotential:                      ClassicPotential.
* ConvAbsDens:                           ConvAbsDens.
* ConvAbsEv:                             ConvAbsEv.
* ConvRelDens:                           ConvRelDens.
* ConvRelEnergy:                         ConvRelEv.
* Coordinates:                           Coordinates.
* DebugLevel:                            DebugLevel.
* DerivativesSpace:                      DerivativesSpace.
* Dimensions:                            Dimensions.
* Displacement:                          Displacement.
* DoubleFFTParameter:                    DoubleFFTParameter.
* EigenSolver:                           EigenSolver.
* EigenSolverFinalTolerance:             EigenSolverFinalTolerance.
* EigenSolverFinalToleranceIteration:    EigenSolverFinalToleranceIteration.
* EigenSolverInitTolerance:              EigenSolverInitTolerance.
* EigenSolverMaxIter:                    EigenSolverMaxIter.
* ElectronicTemperature:                 ElectronicTemperature.
* ExcessCharge:                          ExcessCharge.
* ExtraStates:                           ExtraStates.
* FFTOptimize:                           FFTOptimize.
* GOMaxIter:                             GOMaxIter.
* GOMethod:                              GOMethod.
* GOStep:                                GOStep.
* GOTolerance:                           GOTolerance.
* GuessDensitySpin:                      GuessDensitySpin.
* HSPolarization:                        HSPolarization.
* LCAOStart:                             LCAOStart.
* LocalPotentialSpace:                   LocalPotentialSpace.
* Lsize:                                 Lsize.
* MakeStates:                            oct-make-st.
* MaximumIter:                           MaximumIter.
* Mixing:                                Mixing.
* MixNumberSteps:                        MixNumberSteps.
* MoveIons:                              MoveIons.
* NonInteractingElectrons:               NonInteractingElectrons.
* NumberKPoints:                         NumberKPoints.
* Occupations:                           Occupations.
* OrderDerivatives:                      OrderDerivatives.
* OutputAxisX:                           OutputAxisX.
* OutputAxisY:                           OutputAxisY.
* OutputAxisZ:                           OutputAxisZ.
* OutputDensity:                         OutputDensity.
* OutputDX:                              OutputDX.
* OutputELF:                             OutputElf.
* OutputGeometry:                        OutputGeometry.
* OutputKSPotential:                     OutputKSPotential.
* OutputNETCDF:                          OutputNETCDF.
* OutputPlaneX:                          OutputPlaneX.
* OutputPlaneY:                          OutputPlaneY.
* OutputPlaneZ:                          OutputPlaneZ.
* OutputWfs:                             OutputWfs.
* OutputWfsNumber:                       OutputWfsNumber.
* PDBCoordinates:                        PDBCoordinates.
* PoissonSolver:                         PoissonSolver.
* POLStaticField:                        POLStaticField.
* Radius:                                Radius.
* RandomVelocityTemp:                    RandomVelocityTemp.
* RelativisticCorrection:                RelativisticCorrection.
* SCFinLCAO:                             SCFinLCAO.
* Spacing:                               Spacing.
* SpecDampFactor:                        SpecDampFactor.
* SpecDampMode:                          SpecDampMode.
* SpecEndTime:                           SpecEndTime.
* SpecEnergyStep:                        SpecEnergyStep.
* Species:                               Species.
* SpecMaxEnergy:                         SpecMaxEnergy.
* SpecMinEnergy:                         SpecMinEnergy.
* SpecStartTime:                         SpecStartTime.
* SpecTransformMode:                     SpecTransformNode.
* SpinComponents:                        SpinComponents.
* SystemName:                            SystemName.
* TDDeltaStrength:                       TDDeltaStrength.
* TDDipoleLmax:                          TDDipoleMax.
* TDEvolutionMethod:                     TDEvolutionMethod.
* TDExponentialMethod:                   TDExponentialMethod.
* TDExpOrder:                            TDExpOrder.
* TDGauge:                               TDGauge.
* TDLanczosTol:                          TDLanczosTol.
* TDLasers:                              TDLasers.
* TDMaximumIter:                         TDMaximumIter.
* TDOutputAcceleration:                  TDOutputAcceleration.
* TDOutputCoordinates:                   TDOutputCoordinates.
* TDOutputElEnergy:                      TDOutputElEnergy.
* TDOutputGSProjection:                  TDOutputGSProjection.
* TDOutputLaser:                         TDOutputLaser.
* TDOutputMultipoles:                    TDOutputMultipoles.
* TDOutputOccAnalysis:                   TDOutputOccAnalysis.
* TDPolarization:                        TDPolarization.
* TDTimeStep:                            TDTimeStep.
* TypeOfMixing:                          TypeOfMixing.
* Units:                                 Units.
* UnitsInput:                            UnitsInput.
* UnitsOutput:                           UnitsOutput.
* UnoccConv:                             UnoccConv.
* UnoccMaximumIter:                      UnoccMaximumIter.
* UnoccNumberStates:                     UnoccNumberStates.
* Velocities:                            Velocities.
* Verbose:                               Verbose.
* What2Mix:                              What2Mix.
* XFunctional:                           XFunctional.
* XLength:                               ZLength.
* XYZCoordinates:                        XYZCoordinates.
* XYZVelocities:                         XYZVelocities.


