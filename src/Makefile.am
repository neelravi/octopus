# $Id$

EXTRA_PROGRAMS = oct-cross-section oct-rsf oct-harmonic-spectrum \
                 oct-broad oct-ph oct-xyz-anim oct-center-geom

bin_PROGRAMS = octopus oct-test @UTILITY_PROGRAMS@

basic_SRCS = liboct.F90 string.F90 varinfo.F90 mpi.F90 global.F90 liboct_parser.F90 \
	     messages.F90 datasets.F90 io.F90 units.F90 mpi_debug.F90 profiling.F90 \
             blas.F90 linalg_basic.F90 linalg_adv.F90 gauss_legendre.F90 math.F90 multicomm.F90 

core_SRCS = $(basic_SRCS) \
	ode_solver.F90 root_solver.F90 spline.F90 sparskit.F90 \
	libxc.F90 logrid.F90 periodic_table.F90 atomic.F90 \
	ps_in_grid.F90 \
	ps_psf_file.F90 ps_psf.F90  \
	ps_cpi_file.F90 ps_cpi.F90 \
	ps_fhi_file.F90 ps_fhi.F90 \
	ps_upf.F90 \
	ps_hgh.F90 ps.F90 \
	specie.F90 xyz_file.F90 geometry.F90 simul_box.F90 \
	curv_gygi.F90 curv_briggs.F90 curv_modine.F90 curvlinear.F90 \
	fft.F90 mesh_lib.F90 par_vec.F90 mesh.F90 scalar_mesh.F90 nl_operator.F90 \
	stencil_star.F90 stencil_variational.F90 stencil_cube.F90 stencil_starplus.F90 derivatives.F90 \
	cf.F90 mf.F90 f.F90 \
	out.F90 multigrid.F90 grid.F90 \
	poisson_isf.F90 poisson_fft.F90 \
	poisson_corrections.F90 poisson_cg.F90 poisson_multigrid.F90 poisson.F90 \
	crystal.F90 \
	states.F90 magnetic.F90 elf.F90 states_output.F90 excited_states.F90 \
	xc_functl.F90 xc.F90 mix.F90 spectrum.F90 \
	guess_density.F90

octopus_SOURCES = $(core_SRCS) \
	lasers.F90 rkb_projector.F90 kb_projector.F90 hgh_projector.F90 epot.F90 \
	h.F90 preconditioners.F90 linear_response.F90 restart.F90 \
	xc_OEP.F90 v_ks.F90 systm.F90 \
	eigen.F90 lcao.F90 pes.F90 \
	scf.F90 gs.F90 unocc.F90 \
	static_pol.F90 geom_opt.F90 phonons.F90 \
	td_exp_split.F90 td_exp.F90 td_rti.F90 td_write.F90 td.F90 filters.F90 opt_control.F90 \
	casida.F90 wave_matching.F90 em_resp_calc.F90 em_resp.F90 vdW.F90 pulpo.F90 \
	run.F90 main.F90

noinst_HEADERS = \
	global.h \
	integer.F90 real.F90 complex.F90 undef.F90 \
	mpi_debug_inc.F90 \
	ode_solver_inc.F90 root_solver_inc.F90 sparskit_inc.F90 sparskit_driver.F90 \
	fftw2.F90 fftw3.F90 \
	mesh_init.F90 par_vec_inc.F90 derivatives_inc.F90 cf_inc.F90 mf_inc.F90 f_inc.F90 \
	poisson1D.F90 poisson2D.F90 poisson3D.F90 mix_inc.F90 \
	xc_vxc.F90 xc_axc.F90 xc_fxc.F90 xc_kxc.F90 xc_KLI_inc.F90 xc_OEP_x_inc.F90 xc_OEP_SIC_inc.F90 \
	kb_projector_inc.F90 hgh_projector_inc.F90 epot_inc.F90 \
	xc_OEP_inc.F90 h_inc.F90 \
	eigen_trlan.F90 preconditioners_inc.F90 \
	eigen_inc.F90 eigen_cg_inc.F90 eigen_plan_inc.F90 eigen_arpack_inc.F90 eigen_evolution_inc.F90 \
	lcao_inc.F90 crystal.F90 restart_inc.F90 states_inc.F90 states_kpoints.F90 \
	pes_rc.F90 pes_mask.F90 \
	td_init.F90 td_calc.F90\
	out_inc.F90 math_cg_inc.F90 math_inc.F90 \
	linalg_basic_blas.F90 linalg_basic_int.F90 linalg_adv_lapack.F90 \
	linear_response_inc.F90 linear_response_out.F90 linear_response_solvers.F90\
	em_resp_inc.F90 unocc_inc.F90 casida_inc.F90

core_LIBS = @LIBS_LAPACK@ @LIBS_BLAS@ \
  ../liboct/liboct.a \
  ../liboct_parser/liboct_parser.a \
  ../libxc/src/libxc.a \
  -L../libstring_f -lstring_f \
  @GSL_LIBS@ @GD_LIBS@ @FCEXTRALIBS@

external_LIBS = ../external_libs/expokit/libexpokit.a \
  ../external_libs/qshep/libqshep.a \
  ../external_libs/poisson_isf/libpoisson_isf.a

if COMPILE_METIS
  external_LIBS += ../external_libs/metis-4.0/libmetis.a
endif

octopus_LDADD = @LIBS_FFT@ @LIBS_TRLAN@ @LIBS_ARPACK@ @LIBS_SPARSKIT@ \
  @LIBS_NETCDF@ @LIBS_MPI@ $(core_LIBS) $(external_LIBS) @LIBS_LAPACK@ @LIBS_BLAS@

# now the utility programs
oct_cross_section_SOURCES = $(basic_SRCS) spectrum.F90 cross_section.F90
oct_cross_section_LDADD   = @LIBS_LAPACK@ @LIBS_BLAS@ $(core_LIBS) $(external_LIBS)

oct_rsf_SOURCES = $(basic_SRCS) spectrum.F90 rotational_strength.F90
oct_rsf_LDADD   = @LIBS_LAPACK@ @LIBS_BLAS@ $(core_LIBS) $(external_LIBS)

oct_harmonic_spectrum_SOURCES = $(basic_SRCS) spectrum.F90 hs.F90
oct_harmonic_spectrum_LDADD   = @LIBS_LAPACK@ @LIBS_BLAS@ $(core_LIBS) $(external_LIBS)

oct_xyz_anim_SOURCES = $(core_SRCS) xyzanim.F90
oct_xyz_anim_LDADD   = $(octopus_LDADD)

oct_broad_SOURCES = $(basic_SRCS) broad.F90
oct_broad_LDADD =  $(core_LIBS) $(external_LIBS)

oct_ph_SOURCES = $(basic_SRCS) phonon_spectrum.F90
oct_ph_LDADD =  $(core_LIBS) $(external_LIBS)

oct_center_geom_SOURCES = $(core_SRCS) xyz_adjust.F90 centergeom.F90
oct_center_geom_LDADD = $(octopus_LDADD)

oct_test_SOURCES = $(core_SRCS) lasers.F90 rkb_projector.F90 kb_projector.F90 hgh_projector.F90 epot.F90 h.F90 preconditioners.F90 linear_response.F90 restart.F90 xc_OEP.F90 v_ks.F90 \
	systm.F90 test.F90
oct_test_LDADD = $(octopus_LDADD)

# ctags
CTAGS=ctags-exuberant -e

# if it exists include user defined Makefile.local (which is not included in the octopus package)
-include Makefile.local

# how to compile a F90 file :)

# Define empty rule to override the native rule of automake (otherwise the native
# rule will have precedence over the pattern based rules below). Could not figure out
# how to remove .F90 from .SUFFIXES, which would be an alternative route.
.F90.o:

# compilation is a two step process: first we preprocess F90 files to generate _oct.f90 files
%_oct.f90: %.F90
	@@FCCPP@ @CPPFLAGS@ -I. $< > $*_oct.f90
	@if [ "@DEBUG@" = "no" ]; then \
		cat $*_oct.f90 | grep -v pop_sub | grep -v push_sub >$*_oct.f91; \
		mv -f $*_oct.f91 $*_oct.f90; \
	fi
	@perl -pi -e 's/\\newline/\n/g; s/\\cardinal/#/g' $*_oct.f90

# then we actually compile _oct.f90 files and cleanup
%.o: %_oct.f90
	@FC@ @FCFLAGS@ @FCFLAGS_NETCDF@ -c @FCFLAGS_f90@ -o $@ $*_oct.f90
	@rm -f $*_oct.f90

# how to compile global.F90 (have to define some extra variables here)
DATE := $(shell date)
LATEST_SVN := $(shell ../build/svn_release_number.sh 2>/dev/null) 

global.o: global.F90
	@FCCPP@ @CPPFLAGS@ -I. -DSHARE_OCTOPUS='"${pkgdatadir}"' -DLATEST_SVN='"${LATEST_SVN}"' \
		-DOCTOPUS_VERSION='"${VERSION}"' -DBUILD_TIME='"${DATE}"' -DFC='"${FC}"' \
		-DFCFLAGS='"${FCFLAGS} ${FCFLAGS_f90}"' $< > $*_oct.f90
	@FC@ @FCFLAGS@ -c @FCFLAGS_f90@ -o $@ $*_oct.f90
	@rm -f $*_oct.f90

# cleaning
CLEANFILES = *~ *.bak *.mod *.il *.d *.pc* ifc* *_oct.f90 config_F90.h
DISTCLEANFILES = Makefile.in dirs.h


# how to generate config_F90.h
liboct_parser.F90: config_F90.h
global.F90: config_F90.h
global.h: config_F90.h
config_F90.h: ../config.h
	grep '#define' ../config.h >config_F90.h
../liboct/liboct.a:
	(cd ../liboct; $(MAKE))


# This is to generate the dependencies. It makes use of the makedepf90 program of 
# Erik Edelmann (http://www.helsinki.fi/~eedelman/makedepf90.html). It should be run
# from time to time (just typing make depend within the src directory), substituting
# the dependencies below by the resulting new dependencies. (For normal compilation
# of octopus, there is absolutely no need of installing makedepf90).
depend:
	@makedepf90 $(core_SRCS) $(octopus_SOURCES) $(oct_cross_section_SOURCES) $(oct_rsf_SOURCES) $(oct_harmonic_spectrum_SOURCES) $(oct_xyz_anim_SOURCES) $(oct_broad_SOURCES) $(oct_ph_SOURCES) $(oct_center_geom_SOURCES) $(oct_atoms_magnet_SOURCES)


# Dependencies (only includes taken into account)
atomic.o: global.h
blas.o: global.h
broad.o: global.h
casida.o: global.h casida_inc.F90
centergeom.o: global.h
cf.o: global.h cf_inc.F90
crystal.o: global.h
curv_briggs.o: global.h
curv_gygi.o: global.h
curvlinear.o: global.h
curv_modine.o: global.h
derivatives.o: global.h derivatives_inc.F90
eigen.o: global.h eigen_inc.F90 eigen_cg_inc.F90 eigen_trlan.F90 eigen_plan_inc.F90 eigen_arpack_inc.F90 eigen_evolution_inc.F90
em_resp_calc.o: em_resp_calc_inc.F90
em_resp.o : em_resp.F90 em_resp_inc.F90
epot.o: global.h epot_inc.F90
f.o: global.h f_inc.F90
fft.o: global.h fftw2.F90 fftw3.F90
geometry.o: global.h
geom_opt.o: global.h
gs.o: global.h
h.o: global.h h_inc.F90
hgh.o: global.h
hgh_projector.o: global.h hgh_projector_inc.F90
hs.o: global.h
kb_projector.o: global.h kb_projector_inc.F90
lasers.o: global.h
lcao.o: global.h lcao_inc.F90
liboct.o: global.h
liboct_parser.o: global.h
libxc.o: global.h
linalg_adv.o: global.h linalg_adv_lapack.F90
linalg_basic.o: global.h linalg_basic_blas.F90 linalg_basic_int.F90
linear_response.o: global.h linear_response_inc.F90 linear_response_out.F90 linear_response_solvers.F90
logrid.o: global.h
main.o: global.h
math.o: global.h math_cg_inc.F90 math_inc.F90
mesh.o: global.h mesh_init.F90
mesh_lib.o: global.h
mf.o: global.h mf_inc.F90
mix.o: global.h mix_inc.F90
mpi_debug.o: global.h mpi_debug_inc.F90
profiling.o: global.h
nl_operator.o: global.h
ode_solver.o: global.h ode_solver_inc.F90
opt_control.o: global.h
out.o: global.h out_inc.F90
par_vec.o: global.h par_vec_inc.F90
pes.o: global.h pes_rc.F90 pes_mask.F90
phonons.o: global.h
phonon_spectrum.o: global.h
poisson_fft.o: global.h
poisson_isf.o: global.h
poisson_cg.o: global.h
poisson_multigrid.o: global.h
poisson_corrections.o: global.h
poisson.o: global.h poisson1D.F90 poisson2D.F90 poisson3D.F90 poisson_multigrid.F90
ps.o: global.h
restart.o: global.h restart_inc.F90
rkb_projector.o: global.h
root_solver.o: global.h root_solver_inc.F90
rotational_strength.o: global.h
run.o: global.h
scf.o: global.h
sparskit.o: global.h sparskit_inc.F90 sparskit_driver.F90
specie.o: global.h
guess_density.o: global.h
preconditioners.o: global.h preconditioners_inc.F90
spectrum.o: global.h
spline.o: global.h
states.o: global.h states_kpoints.F90 states_inc.F90
static_pol.o: global.h
em_resp.o: global.h em_resp_inc.F90
stencil_cube.o: global.h
stencil_star.o: global.h
stencil_variational.o: global.h
strength_function.o: global.h
systm.o: global.h
td_exp.o: global.h
td_exp_split.o: global.h
td.o: global.h td_init.F90
td_rti.o: global.h
td_write.o: td_calc.F90
test.o: global.h
tm.o: global.h
units.o: global.h
unocc.o: global.h unocc_inc.F90
v_ks.o: global.h
xc.o: global.h xc_vxc.F90 xc_axc.F90 xc_fxc.F90 xc_kxc.F90
xc_functl.o: global.h
xc_OEP.o: global.h xc_KLI_inc.F90 xc_OEP_x_inc.F90 xc_OEP_SIC_inc.F90 xc_OEP_inc.F90
xyz_adjust.o: global.h
xyzanim.o: global.h
xyz_file.o: global.h

# manually sort out a few dependencies
varinfo.o: string.o
global.o: global.h varinfo.o string.o
liboct_parser.o: global.o
datasets.o: liboct_parser.o
messages.o: liboct.o datasets.o
io.o: global.o liboct_parser.o datasets.o
