#!/bin/bash
#
# $Id$

# Paths
prefix=/usr
testsuite=$prefix/share/octopus/testsuite

# Arch
arch=${MACHTYPE%-pc-linux-gnu}

# Usage
function usage() {
    cat <<EOF

 Copyright (C) 2005-2006 by Heiko Appel

Usage: oct-run_testsuite [options]
    
     -h            this message
     -n            dry run mode (show what would be executed)
     -s            run short testsuite
     -f            run full testsuite
     -l            local run
     -e            exec suffix for octopus executable
     -p            installation prefix [default: /usr]
     -w            without MPI tests (do not run parallel tests)
     -m address    mail report to address

Report bugs to <appel@physik.fu-berlin.de>.
EOF
 exit 0;
}


# Dry run ...
function CMD {
    [ "$dry_run" -o "$verbose" ] && echo -e "\033[32m$@\033[0m";
    [ ! "$dry_run" ] && eval "$@";
}


# Run all tests
function run_testsuite() {

[ "$local_run" == "yes" ] && testsuite=$(pwd)

for x in $octopus_exe; do
    for y in $(find $testsuite -name "*.test" | xargs grep $match | awk -F: '{print $1}' | sort -u); do
	ybase=`basename $y`
	xybase=${x}${exec_suffix}-${ybase%.test}
	if [ "$local_run" == "yes" ]; then
	    octopus_local=`pwd`/../src/$x
	    [ -x $octopus_local ] && CMD ./oct-run_regression_test.pl -l -p -e $octopus_local -f $y | tee ${xybase}.log
	else
	    if [ -x $prefix/bin/${x}${exec_suffix} ]; then
              if [ -z "${exec_suffix}" ]; then
		CMD $prefix/bin/oct-run_regression_test.pl -l -p -e $prefix/bin/$x -f $y | tee ${xybase}.log
              else
                CMD $prefix/bin/oct-run_regression_test.pl -l -p -e $prefix/bin/$x -s ${exec_suffix} -f $y | tee ${xybase}.log
              fi
            fi
	fi
	[ -e out.log ] && mv out.log ${xybase}.out.log
    done
done

}


# Send report via mail
function mail_report() {

datestamp=$(date +"%Y-%m-%d")

for x in $octopus_exe; do
    for y in $(find $testsuite -name "*.test" | xargs grep $match | awk -F: '{print $1}' | sort -u); do
	ybase=`basename $y`
	xybase=${x}${exec_suffix}-${ybase%.test}
	failed_tests=$(grep FAIL ${xybase}.log | wc -l) 
	echo "Checking for failed tests: ${xybase}.log"
	if [ $failed_tests -gt 0 ]; then
	    echo "Found: $failed_tests"
	    echo "Mailing report to: $mailaddr"
            cat oct-header ${xybase}.log ${xybase}.out.log | mutt -s "[oct-run_testsuite on $arch] daily report - $datestamp" $mailaddr
	fi
    done
done

}


# show usage info if no args at all
[ "$#" -eq 0 ] && usage;

# some defaults
match="short-run"
send_mail="no"

while getopts "hnlsfwp:e:m:" opt ; do
    case "$opt" in
        h) usage ;;
        n) echo="echo"; dry_run="yes";; 
        p) prefix="$OPTARG"; testsuite=$prefix/share/octopus/testsuite ;;
        e) exec_suffix="$OPTARG";;
        l) local_run="yes";;
        s) match="short-run" ;;
        f) match="long-run" ;;
        w) run_in_parallel="no" ;;
        m) mailaddr="$OPTARG"; send_mail="yes" ;;
        ?) echo "Error parsing arguments"; exit 1 ;;
    esac
done
shift $[ OPTIND - 1 ]

# for now the long-run matches everything
[ "${match}" == "long-run" ] && match=.

# Define octopus executables
# should we run in serial and in parallel?
if [ "${run_in_parallel}" == "no" ]; then
    octopus_exe="octopus"
else
    octopus_exe="octopus octopus_mpi"
fi
    
# get epoch seconds at testsuite start
testsuite_start=$(date +%s) 

# run testsuite
run_testsuite $match

# get epoch seconds after we are done and compute time difference
testsuite_end=$(date +%s) 
timediff_sec=$[ testsuite_end - testsuite_start ]

rm -rf oct-header
# time calculation stays correct if $timediff_sec < 24h
RUNTIME="Total run-time of the testsuite: $(date +%H:%M:%S -d "00:00:00 + $timediff_sec sec")" 
# save runtime for mail header
echo $RUNTIME > oct-header
echo "" >> oct-header

# and print also to the screen
echo $RUNTIME
echo ""

# should we send a mail report?
[ "${send_mail}" == "yes" ] && mail_report $match $mailaddr

# clean up
rm -f octopus*.log stamp build-stamp
