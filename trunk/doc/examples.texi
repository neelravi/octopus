@node Examples, Options Index, Undocumented Variables, Top
@chapter Examples

@menu
* Hello world::                 
* Benzene::                     
@end menu

@node Hello world, Benzene, Examples, Examples
@subsection Hello world

As a first example, we will take a sodium atom.
With your favourite text editor, create
the following input ``inp''.
@example
  SystemName = 'Na'
  CalculationMode = 1
  %Species
    'Na' | 22.989768 | 11 | "tm2" | 0 | 0
  %
  %Coordinates
    'Na' | 0.0 | 0.0 | 0.0 | no
  %
  Radius = 12.0
  Spacing = .6
  TypeOfMixing = 2
@end example


This input file should be essentially self-explanatory. 
Note that a Troullier-Martins pseudopotential file (``Na.vps'', or ``Na.ascii'') should
be accesible to the program. A sample ``Na.ascii'' may be found
in @code{OCTOPUS-HOME/share/PP/TM2}. If @code{octopus} was installed
(@code{make install} was issued after @code{make}), there should be no need
to do anything -- the program should find it. Otherwise, you may as well place it
in the working directory.
Then run @code{octopus} -- for example, do @code{octopus > out }, so that the 
output is stored in ``out'' file. If everything goes OK, ``out'' should look like
@footnote{
Before this output, a beautiful octopus ascii-art picture may be printed...
}:
@example
                    Running octopus, version 1.1
             (build time - Fri Mar 14 14:23:49 CET 2003)

Info: Calculation started on 2003/03/17 at 03:49:56
Info: Reading pseudopotential from file:
      '/home/marques/share/octopus/PP/TM2/Na.ascii'
      Calculating atomic pseudo-eigenfunctions for specie Na....
      Done.
Info: l =  0 component used as local potential
  Type = sphere           Radius [b] =  12.000
  Spacing [b] = ( 0.600, 0.600, 0.600)    volume/point [b^3] =  0.21600
  # inner mesh =  33401   # outer mesh =  18896
Info: Derivatives calculated in real-space
Info: Local Potential in Reciprocal Space.
Info: FFTs used in a double box (for poisson | local potential)
      box size = (  81,  81,  81)
      alpha =      2.00000
Info: Using FFTs to solve poisson equation with spherical cutoff.
Info: Exchange and correlation
      Exchange    family    : LDA 
                  functional: non-relativistic  
      Correlation family    : LDA 
                  functional: Perdew-Zunger 
Info: Allocating rpsi.
Info: Random generating starting wavefunctions.
Info: Unnormalized total charge =      0.998807
Info: Renormalized total charge =      1.000000
Info: Setting up Hamiltonian.
Info: Performing LCAO calculation.
Info: LCAO basis dimension:      1
      (not considering spin or k-points)
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102098       1.000000
Info: SCF using real wavefunctions.
Info: Broyden mixing used. It can (i) boost your convergence,
      (ii) do nothing special, or (iii) totally screw up the run.
      Good luck!
Info: Converged =     0
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102975       1.000000      (2.8E-02)
Info: iter =    1 abs_dens = 0.53E-03 abs_ener = 0.60E+00

Info: Converged =     0
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102477       1.000000      (1.4E-03)
Info: iter =    2 abs_dens = 0.43E-03 abs_ener = 0.65E-05

Info: Converged =     1
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102419       1.000000      (5.1E-04)
Info: iter =    3 abs_dens = 0.39E-04 abs_ener = 0.20E-06

Info: Converged =     1
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102436       1.000000      (8.5E-05)
Info: iter =    4 abs_dens = 0.24E-04 abs_ener = 0.52E-08

Info: Converged =     1
Eigenvalues [H]
   #   Eigenvalue    Occupation      Error (1)
   1    -0.102437       1.000000      (1.5E-06)
Info: iter =    5 abs_dens = 0.14E-05 abs_ener = 0.36E-10

Info: SCF converged in    5 iterations
Info: Deallocating rpsi.
Info: Calculation ended on 2003/03/17 at 03:50:04
@end example
Take now a look at the 
working directory. It should include the following files:
@example
-rw-rw-r--    1 user  group       177 Jul 10 12:29 inp
-rw-rw-r--    1 user  group      4186 Jul 10 12:35 out
-rw-rw-r--    1 user  group      1626 Jul 10 12:35 out.oct
drwxrwxr-x    2 user  group      4096 Jul 10 12:35 static
drwxrwxr-x    2 user  group      4096 Jul 10 12:35 tmp
@end example

Besides the initial file (@code{inp}) and the @code{out} file, two new
directories appear. In @code{static}, you will find the file @code{info},
with information about the static calculation (it should be hopefully
self-explanatory, otherwise please complain to the authors).
In @code{tmp}, you will find the @code{restart.static}, a binary
file containg restart information about the ground-state, which is used if, for example,
you want to start a time-dependent calculation afterwards.
Finally, you can safely ignore @code{out.oct}: it is an output from 
the liboct library, irrelevant for what concerns physics ;).

@strong{Exercises}:
@itemize @bullet
@item Study how the total energy and eigenvalue of the sodium atom improve
  with the mesh spacing.

@item Calculate the static polarizability of the sodium atom (@code{CalculationMode = 7}).
  Two new files will be generated: @code{restart.pol} that can be used to resume
  the polarizability calculation, and @code{Na.pol} that contains the static polarizability
  tensor. Note that this calculation overwrites @code{tmp/restart.static}, so that
  what now is there is the ground state for the system @emph{with} an external static
  electrical field applied. Delete it since it is useless.

@item Calculate a few unoccupied states (@code{CalculationMode = 3}). The eigenspectrum
  will be in the file @code{eigenvalues}. Why don't we find a Rydberg series in the
  eigenspectrum?

@item Repeat the previous calculation with PBE, LB94, and exact exchange. 
  Don't forget to @strong{move} the file @code{tmp/restart.static} when switching
  between exchange-correlation functionals.

@item Perform a time-dependent evolution (@code{CalculationMode = 5}), to calculate
  the optical spectrum of the Na atom. Use a @code{TDDeltaStrength = 0.05}, polarised
  in the @code{x} direction. The multipole moments of the density are output to
  the file @code{td.general/multipoles}. You can process this file with the utility
  @code{strength-function} to obtain the optical spectrum. 
  If you have computer time to waste, re-run the time-dependent 
  simulation for some other xc choices.

@end itemize

@node Benzene,  , Hello world, Examples
@subsection Benzene

Well, the sodium atom is a bit too trivial. Let's try something harder: benzene.
you will just need the
geometry for benzene to be able to play. Here it is (in @AA{}):
@example
 C  0.000  1.396  0.000
 C  1.209  0.698  0.000
 C  1.209 -0.698  0.000
 C  0.000 -1.396  0.000
 C -1.209 -0.698  0.000
 C -1.209  0.698  0.000
 H  0.000  2.479  0.000
 H  2.147  1.240  0.000
 H  2.147 -1.240  0.000
 H  0.000 -2.479  0.000
 H -2.147 -1.240  0.000
 H -2.147  1.240  0.000
@end example

Follow now the steps of the previous example. Carbon and Hydrogen have a much harder
pseudo-potential than Sodium, so you will probably have to use a tighter
mesh. It also takes much more time...
