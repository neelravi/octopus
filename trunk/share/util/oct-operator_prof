#!/bin/bash
#
# Copyright (C) 2002-2006 M. Marques, A. Castro, A. Rubio, G. Bertsch
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id: f.F90 2781 2007-03-23 10:58:32Z lorenzen $


# This script profiles the performance of the different non local
# operator implementations of Octopus, both for complex and real wave
# functions. The fastest implementation is strongly dependent on the C
# and Fortran 90 compiler used and the target machine. This script can
# be used to determine the best version for a given binary and platform.

NLOP_TAG="NL_OPERATOR"
PROF_FILE="profiling.ser/profiling.000"

real="yes"
complex="yes"
binary=`which octopus`
complex_methods="fortran c sse olu"
real_methods="fortran c olu olu_c"


# Input file for real wavefunctions (based on
# finite_systems_3d/01-carbon_atom.01-ground_state.inp).
real_inp="ProfilingMode = yes\n\
OperateDouble = METHOD\n\
DebugLevel = 0\n\
CalculationMode = gs\n\
fromScratch = yes\n\
units = \"eVA\"\n\
%Coordinates\n\
\"H\" | 0 | 0 | 0\n\
%\n\
spacing = 0.10\n\
radius = 5.0\n\
LCAOStart=no\n\
MaximumIter = 2\n\
NonInteractingElectrons=yes\n"

# Input file for complex wavefunctions (based on
# finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp).
complex_inp="ProfilingMode = yes\n\
OperateComplex = METHOD\n\
DebugLevel = 0\n\
CalculationMode = gs\n\
fromScratch = yes\n\
BoxShape = sphere\n\
Radius  = 5.0\n\
Spacing = 0.2\n\
%Species\n\
\"Pb\" | 207.2 | spec_ps_hgh | 82 | 0 | 0\n\
%\n\
%Coordinates\n\
\"Pb\" | 0 | 0 | 0.0\n\
%\n\
SpinComponents = non_collinear\n\
RelativisticCorrection = spin_orbit\n\
ExcessCharge=3\n\
MaximumIter = 2\n\
LCAOStart=no\n\
EigenSolverInitTolerance = 1e-5\n\
NonInteractingElectrons=yes\n"

function abort {
    echo $1 > /dev/stderr
    exit ${2-1}
}


# Right-pad a string with blanks up to a given length.
function pad_string {
    string="$1"
    width="$2"
    string_length=`echo -n $string | wc -m`
    if [ "$string_length" -lt "$width" ]; then
	spaces_length="$((width - string_length))"
	spaces=`for((i = 1; i <= spaces_length; i++)); do echo -n ' '; done`
	echo "$string$spaces"
    else
	echo "$string"
    fi
}


# Print a short usage message and exit.
function usage {
    cat <<EOH
Determines the best settings for the OperatorDouble and OperatorComplex
input variables for a certain binary on the current platform.

Usage: oct-operator_prof [options]

    -h         this message
    -b file    Octopus binary to use   
    -c         complex wavefunctions only
    -r         real wavefunctions only

EOH
    exit 0
}


# Parse commandline and abort on unknown arguments.
function parse_cmdline {
    while getopts "hb:cr" opt; do
	case "$opt" in
	    h)
		usage;;
	    b)
		binary="$OPTARG"
		# This piece checks if the given filename is a relative path.
		# If so, the current worling directory is prepended to get an
		# absolute path. The check is simple: if the filename contains
		# a "/" which is not the first character, it is considered relative.
		if echo "$binary" | grep "/" &> /dev/null; then
		    if echo "$binary" | grep -v "^/" &> /dev/null; then
			binary="$PWD/$binary"
		    fi
		fi
		;;
	    c)
		real="no";;
	    r)
		complex="no";;
	    *)
		echo "Invalid option: $opt" > /dev/stderr
		exit 1
		;;
	esac
    done
}


# Do the actual profiling. The input file's content is passed as first argument,
# all other arguments are methods to be substitued into the input. This function
# also prints a result message.
function profile {
    input="$1"
    shift
    methods="$@"
    best_method=""
    best_time=""
    output=""

    for m in $methods; do
	temp=`mktemp -d /tmp/oct_prof.XXXXXX || abort "Could not create temporary directory"`
	echo -e "$input" | sed "s/METHOD/$m/" > "$temp/inp"
	
	cd "$temp"
	"$binary" &> /dev/null
	if [ -f "$PROF_FILE" ]; then
	    time=`grep $NLOP_TAG $PROF_FILE | awk -F' ' '{print $3}'`
	    method_string=`pad_string $m 20`
	    output="$output    $method_string$time s\n"
 	    if [ -z "$best_time" ] || [ `echo "$time<$best_time" | bc` == "1" ]; then
 		best_time="$time"
 		best_method="$m"
 	    fi
	fi
	cd "$OLDPWD"
	rm -rf "$temp"
    done

    if [ "$output" ]; then
	output="$output\n    *** Best method:    $best_method\n"
	echo -e "$output"
    fi
}


# Run the complex and real profiling as required.
function run {
    parse_cmdline $@

    if [ "$real" == "yes" ]; then
	echo "Profiling non local operator for real wavefunctions"
	profile "$real_inp" "$real_methods"
	echo
    fi

    if [ "$complex" == "yes" ]; then
	echo "Profiling non local operator for complex wavefunctions"
	profile "$complex_inp" "$complex_methods"
	echo
    fi
	
}


run $@
